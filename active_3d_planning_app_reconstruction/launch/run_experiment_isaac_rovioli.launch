<launch>
  <!-- Gazebo arguments -->
  <arg name="mav_name" default="firefly"/>
  <arg name="gui" default="false"/>
  <arg name="verbose_gazebo" default="false"/>

  <!-- Voxblox arguments -->
  <arg name="voxel_size" default="0.10"/>
  <arg name="voxels_per_side" default="16"/>
  <arg name="ray_length" default="5.0"/>
  <arg name="method" default="merged"/>
  <arg name="verbose_voxblox" default="false"/>
    
  <!-- Isaac Routine arguments -->
  <arg name="delay" default="3.0"/>  
  
  <!-- Isaac Sensor arguments (ground_truth, kinect, gaussian_depth_noise)-->
  <!-- TODO: (michbaum) First consider ground truth sensor data -->
  <!-- <arg name="model_type" default="gaussian_depth_noise"/> -->
  <arg name="model_type" default="ground_truth"/>
  <arg name="flatten_distance" default="6.0"/>
  <arg name="maximum_distance" default="0.0"/>
  
  <!-- Odometry  arguments (random_walk, ground_truth)-->
  <arg name="use_rovioli" default="true"/>
  <!-- TODO: (michbaum) Maybe use ground truth in the beginning? -->
  <!-- <arg name="odom_noise_model" default="random_walk"/> -->
  <arg name="odom_noise_model" default="ground_truth"/>
  
  <!--  Planner arguments (can use a single config or compose the planner)-->
  <arg name="use_separate_configs" default="false"/>
  <arg name="planner_config" default="planners/example_config.yaml"/>
  <arg name="verbose_planner" default="true"/>
  <arg name="visualize" default="true"/>

  <!--  Floorplan arguments -->
  <arg name="use_opt_traj" default="true"/>
  <arg name="use_floorplan" default="true"/>
  
  <!--  Experiment arguments --> 
  <!-- <arg name="experiment_config" default="Warehouse.yaml"/> -->
  <arg name="experiment_config" default="Maze.yaml"/>
  <arg name="record_data" default="true"/>
  <arg name="record_visualization" default="true"/>
  <!-- <arg name="data_directory" default="/home/michbaum/Projects/optag/data"/>  -->
  <arg name="data_directory" default="/home/michbaum/Projects/optag_EH/data"/> 
  <!-- Frequency in seconds when the current map state should be saved to disk -->
  <arg name="data_frequency" default="30.0" />
  <arg name="time_limit" default="30" /> <!-- in minutes, full map takes ~30min, due to sim_time_factor set to 6h -->
  <!-- If we use a simulation to gather data or a real device (not implemented yet) -->
  <arg name="use_sim" default="true" /> 
  <!-- <arg name="output_file" default="warehouse_drift_evaluation_reconstruction_planner.csv" /> -->
  <arg name="output_folder" default="/home/michbaum/Projects/optag_EH/data/maze_test_eval/" />
  <arg name="relativePose_output_file" default="relative_pose_error.csv" />
  <arg name="absolutePoseGt_output_file" default="stamped_groundtruth.txt" />
  <arg name="absolutePoseDrifty_output_file" default="stamped_traj_estimate.txt" />
  <!-- *** Experiment Execution *** -->
  
  <!-- Setup experiment params, data, nodes -->
  <rosparam command="load" file="$(find active_3d_planning_app_reconstruction)/cfg/experiments/$(arg experiment_config)"/>

  <!-- Setup empty gazebo world for physics-->
  <env name="GAZEBO_MODEL_PATH" value="${GAZEBO_MODEL_PATH}:$(find rotors_gazebo)/models"/>
  <env name="GAZEBO_RESOURCE_PATH" value="${GAZEBO_RESOURCE_PATH}:$(find rotors_gazebo)/models"/>
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find isaac_cv_ros)/content/gazebo_empty.world" />
    <arg name="debug" value="false" />
    <arg name="paused" value="true" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="verbose" value="$(arg verbose_gazebo)"/>
    <arg name="use_sim_time" value="true" /> 
  </include>

  <group ns="$(arg mav_name)">
    <!-- Setup a mav -->
    <include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
      <arg name="mav_name" value="$(arg mav_name)" />
      <arg name="model" value="$(find rotors_description)/urdf/mav_generic_odometry_sensor.gazebo" />
      <!-- Enable ground truth just publishes ground truth imu and odometry data alongside the flawed data. Should always be true. -->
      <arg name="enable_ground_truth" value="true" /> 
      <arg name="enable_logging" value="false" />
      <arg name="z" value="0" /> <!-- TODO: (michbaum) Check this -->
    </include>
    
    <!-- MPC trajectory tracker (0.0021 sampling time needs to match odom publish rate!)-->
    <node name="mav_nonlinear_mpc" pkg="mav_nonlinear_mpc" type="nonlinear_mpc_node" respawn="true" clear_params="true">
      <remap from="odometry" to="ground_truth/odometry" />
      <rosparam file="$(find mav_nonlinear_mpc)/resources/nonlinear_mpc_$(arg mav_name).yaml" />
      <rosparam file="$(find mav_disturbance_observer)/resources/disturbance_observer_$(arg mav_name).yaml"/>
      <param name="use_rc_teleop" value="false"/>
      <param name="verbose" value="false" />
      <param name="reference_frame" value="world"/>
      <param name="sampling_time" value="0.0021"/>
    </node>
    
    <!-- Rotor input controller -->
    <node name="PID_attitude_controller" pkg="mav_lowlevel_attitude_controller" type="mav_pid_attitude_controller_node" respawn="true" clear_params="true">
      <remap from="odometry" to="ground_truth/odometry" />
      <rosparam file="$(find mav_lowlevel_attitude_controller)/resources/PID_attitude_$(arg mav_name).yaml" />
    </node>
    
    <!-- Odometry: noise model / rovio -->
    <!-- <node pkg="rovio" type="rovio_node" name="rovio" output="screen" if="$(arg use_rovioli)">
      <param name="filter_config" value="$(find active_3d_planning_app_reconstruction)/cfg/rovio/rovio.info"/>
      <param name="camera0_config" value="$(find active_3d_planning_app_reconstruction)/cfg/rovio/isaac_cam0.yaml"/>
      <remap from="cam0/image_raw" to="/isaac/isaac_ros_client/isaac_gray_image_out" />
      <remap from="imu0" to="imu" />
    </node> -->

    <!-- TODO: If use_rovioli=true, run "roslaunch maplab_node maze-maplab-node-w-rovioli.launch" in another terminal that sources the maplab workspace
               prior to running this launch file. -->

    <node name="odometry_noise_model" pkg="active_3d_planning_app_reconstruction" type="gps_odometry_simulator.py" output="screen" unless="$(arg use_rovioli)">
      <!-- If the noise model is ground truth, we do not apply any of these uncertainties (which is expected). -->
      <param name="position_uncertainty" value="0.05"/>
      <param name="roll_pitch_uncertainty" value="1.5" />
      <param name="yaw_uncertainty" value="5.0" />
      <param name="noise_model" value="$(arg odom_noise_model)" />
      <param name="publish_tf" value="true" />
      <remap from="odometry_in" to="ground_truth/odometry" />
    </node> 
    <!-- TODO: It seems like the noisy odometry data is not really taken in anywhere (called /firefly/odometry_noise_model/odometry_out) -->
    <!-- But publishes the camera link frame, investigate. -->

    <!-- Launch the topic_tools throttle node -->
    <!-- <node name="topic_throttler" type="throttle" pkg="topic_tools" args="messages ground_truth/odometry 30 ground_truth/odometry_throttled" /> -->
    

    <!-- static camera transform -->
    <node pkg="tf" type="static_transform_publisher" name="tf_camera_to_link" args="0 0 0 -0.5 0.5 -0.5 0.5 /camera_link /camera 100"/>  
  </group>


  <group ns="isaac">
    <!-- Isaac vision client -->
    <node name="isaac_ros_client" pkg="isaac_cv_ros" type="isaac_ros_client.py" required="true" output="screen">
      <!-- <param name="publish_tf" value="false"/> -->
      <!-- <param name="collision_on" value="true"/> --> <!-- Currently not implemented. -->
      <remap from="odometry" to="/$(arg mav_name)/ground_truth/odometry" /> <!-- TODO: Change back to non-throttled! -->
      <param name="publish_color_images" value="false" />
      <param name="publish_gray_images" value="true" />
      <remap from="camera_info" to="isaac_sim/camera_info" />
      <remap from="rgb" to="isaac_sim/rgb" />
      <remap from="depth" to="isaac_sim/depth" />
      <remap from="teleport" to="isaac_sim/teleport" />
    </node>

    <!-- Launch the topic_tools throttle node -->
    <node name="topic_throttler" type="throttle" pkg="topic_tools" args="messages isaac_ros_client/isaac_sensor_raw 8.5 isaac_ros_client/isaac_sensor_raw_throttled" />
    
    <!-- Isaac sensor model -->
    <node name="isaac_sensor_model" pkg="isaac_cv_ros" type="sensor_model.py" output="screen">
      <param name="camera_params_ns" value="/isaac/isaac_ros_client/camera_params"/>
      <param name="flatten_distance" value="$(arg flatten_distance)"/>
      <param name="model_type" value="$(arg model_type)" />
      <param name="maximum_distance" value="$(arg maximum_distance)" />
      <!-- TODO: These are pretty much only for debugging, they get released alongside the pointcloud message. -->
      <param name="publish_color_images" value="false" />
      <param name="publish_gray_images" value="false" />
      <param name="publish_transform_stamped" value="true"/>
      <param name="k_mu_2" value="0.0024" />
      <param name="k_sigma_2" value="0.0024" />
      <remap from="isaac_sensor_raw" to="isaac_ros_client/isaac_sensor_raw_throttled" />
    </node>

    <!-- Simulation manager for launching the MAV and monitoring -->
    <node name="simulation_manager" pkg="isaac_cv_ros" type="simulation_manager.py" output="screen">
      <param name="ns_mav" value="/$(arg mav_name)" />
      <param name="ns_gazebo" value="/gazebo" />
      <param name="monitor" value="true" />
      <param name="horizon" value="20" />
      <remap from="isaac_raw_in" to="isaac_ros_client/isaac_sensor_raw" />
      <remap from="isaac_out_in" to="isaac_sensor_model/isaac_sensor_out" />
    </node>
    
    <!-- Experiment launcher, data generation-->
    <node name="eval_data_node" pkg="active_3d_planning_app_reconstruction" type="eval_data_node.py" output="screen" required="true">
      <remap from="isaac_out_in" to="isaac_sensor_model/isaac_sensor_out" />
      <remap from="isaac_simulation_ready" to="simulation_manager/simulation_ready" />
      <remap from="collision" to="isaac_ros_client/collision" />
      <remap from="odometry" to="/rovioli/odom_T_M_I" />
      <remap from="ground_truth_odometry" to="/$(arg mav_name)/ground_truth/odometry" />
      <remap from="optimal_trajectory_ready" to="/floorplan_node/opt_traj_ready"/>
      <param name="ns_planner" value="/planner/planner_node" />
      <param name="ns_voxblox" value="/planner/voxblox_node" />
      <param name="delay" value="$(arg delay)" />
      <param name="startup_timeout" value="60.0" />
      <param name="evaluate" value="$(arg record_data)" />
      <param name="eval_directory" value="$(arg data_directory)" />
      <param name="eval_frequency" value="$(arg data_frequency)" />
      <param name="time_limit" value="$(arg time_limit)" /> <!-- in minutes -->
      <param name="use_opt_traj" value = "$(arg use_opt_traj)" />
      <param name="output_folder" value="$(arg output_folder)" />
    </node>


    <!-- static camera transform for the simulation (Isaac has a different convention than ROS!) -->
    <!-- static_transform_publisher x y z qx qy qz qw frame_id child_frame_id  period_in_ms -->
    
    <!-- Maze -->
    <node pkg="tf" type="static_transform_publisher" name="tf_sim_world_to_world" args="0.0 0.0 -1.5 0.0 0.0 0.0 1.0 /world /sim_world 100" if="$(eval experiment_config == 'Maze.yaml')"/>
    
    <!-- Warehouse -->
    <node pkg="tf" type="static_transform_publisher" name="tf_sim_world_to_world" args="-5.0 -5.0 -2.0 0.0 0.0 0.0 1.0 /world /sim_world 100" if="$(eval experiment_config == 'Warehouse.yaml')"/>
    
    <node pkg="tf" type="static_transform_publisher" name="tf_camera_sim_frame_to_firefly" args="0 0 0 -0.5, 0.5, 0.5, -0.5 /$(arg mav_name)/base_link /camera_sim_frame 100"/>
    <!-- This one is wrong -->
    <!-- <node pkg="tf" type="static_transform_publisher" name="tf_camera_sim_to_sim_frame" args="0 0 0 0.0, 0.707, 0.0, 0.707 /camera_sim_frame /camera_sim 100"/> -->
  </group>

  <node pkg="rosbag" type="record" name="rosbag_vis_recorder"
      args="record -o $(arg data_directory)/sim_bags/sim_bags /isaac/isaac_ros_client/isaac_gray_image_out
                                                              /firefly/ground_truth/imu
                                                              /firefly/imu
                                                              /firefly/ground_truth/position" 
      if="$(eval arg('record_data') and arg('record_visualization'))">
      <!-- <remap from="cam0/image_raw" to="/isaac/isaac_ros_client/isaac_gray_image_out" /> -->
      <!-- <remap from="imu0" to="/$(arg mav_name)/imu" /> -->
      <!-- <remap from="imu0/ground_truth" to="/$(arg mav_name)/ground_truth/imu" /> -->
  </node>

  <group ns="planner">
    <!-- Voxblox -->
    <!-- This executes esdf_server_node.cc -->
    <node name="voxblox_node" pkg="voxblox_ros" type="esdf_server" output="screen" args="-alsologtostderr">
      <remap from="pointcloud" to="/isaac/isaac_sensor_model/isaac_sensor_out"/>
      <remap from="transform" to="/rovioli/Transform_G_I" if="$(arg use_rovioli)"/> <!-- TODO: Change topic accordingly! -->
      <!-- Possible topics:
           /rovioli/odom_T_M_I
           /rovioli/Transform_G_I
           /odometry/maplab_odom_T_M_I <- this one is used in the maplab_node launch file
            -->
      <remap from="transform" to="/isaac/isaac_sensor_model/transform" unless="$(arg use_rovioli)"/>
      <rosparam command="load" file="$(find active_3d_planning_app_reconstruction)/cfg/voxblox/transforms.yaml"/> 
      <param name="use_tf_transforms" value="false"/>
      <param name="publish_tsdf_map" value="true" />
      <param name="publish_esdf_map" value="true" />
      <param name="tsdf_voxel_size" value="$(arg voxel_size)" />
      <param name="tsdf_voxels_per_side" value="$(arg voxels_per_side)" />
      <param name="color_mode" value="color" />
      <param name="update_mesh_every_n_sec" value="1.0" />
      <param name="method" value="$(arg method)" />
      <param name="max_ray_length" value="$(arg ray_length)" />
      <param name="allow_clear" value="true" />
      <param name="verbose" value="$(arg verbose_voxblox)" />
      <param name="publish_map_incremental" value="true" />
    </node>
    
    <!-- Planner -->
    <node name="planner_node" pkg="active_3d_planning_app_reconstruction" type="reconstruction_planner_node" output="screen" >
      <remap from="planner_node/esdf_map_in" to="voxblox_node/esdf_map_out" />
      <remap from="planner_node/tsdf_map_in" to="voxblox_node/tsdf_map_out" />
      <param name="use_tf_transforms" value="false" />
      <param name="tsdf_voxel_size" value="$(arg voxel_size)" />
      <param name="tsdf_voxels_per_side" value="$(arg voxels_per_side)" />
      <param name="update_mesh_every_n_sec" value="0.0" />   
      <param name="publish_traversable" value="false" />         
      <!-- TODO: Find the right Odometry topic that corresponds to the transform -->
      <!-- <remap from="odometry" to="/$(arg mav_name)/ground_truth/odometry" /> -->
      <remap from="odometry" to="/rovioli/odom_T_M_I" />
      <!-- TODO: Ingest this Odom for statistics and for our policy -->
      <remap from="ground_truth_odometry" to="/$(arg mav_name)/ground_truth/odometry" />
      <!-- TODO: Maybe change this to trajectory_drifty and have a new node transform the frame of it? -->
      <remap from="command/trajectory" to="/$(arg mav_name)/command/trajectory_drifty" if="$(arg use_sim)" />
      <remap from="command/trajectory" to="/$(arg mav_name)/command/trajectory" unless="$(arg use_sim)"/>
      <param name="verbose" value="$(arg verbose_planner)" />
      <param name="visualize" value="$(arg visualize)" />
      <param name="log_performance" value="$(arg record_data)" />
      <param name="log_drift_performance" value="false" /> <!-- Whether to log drift estimation to a csv file / old method, now done with eval_data_node.py-->
      <param name="drift_log_dir" value="$(arg output_folder)" />
      <!-- TODO: CHANGE -->
      <param name="drift_log_file" value="$(arg relativePose_output_file)" />
      <param name="absPoseGt_log_file" value="$(arg absolutePoseGt_output_file)" />
      <param name="absPoseDrifty_log_file" value="$(arg absolutePoseDrifty_output_file)" />
      <!-- Frames to utilize to extract the current gt pose of the agent in the simulation -->
      <param name="world_frame" value="world" />
      <param name="ground_truth_frame" value="firefly/base_link" />
      <param name="floorplan_frame" value="floorplan" />
      <param name="drifty_frame" value="rovioli/imu" />
      <param name="optimal_trajectory_frame" value="optimal_trajectory"/>
      <!-- Experiment dependent -->
      <param name="trajectory_evaluator/bounding_volume_args" value="/target_bounding_volume" />
      <param name="trajectory_generator/bounding_volume_args" value="/map_bounding_volume" />
      
      <!-- Modular Config -->    
      <rosparam command="load" file="$(find active_3d_planning_app_reconstruction)/cfg/$(arg planner_config)"/>

      <!-- Floorplan Information -->
      <param name="use_opt_traj" value="$(arg use_opt_traj)"/> 
      <!-- TODO : add bool here that tells if rather should use gt or floorplan -->
    </node>    

    <!-- Trajectory transformer in case we use a simulation that operates in a "ground_truth" simulation frame -->
    <!-- Otherwise there is no need for a transform since our agent relies on the same drifty odometry for his localization -->
    <node name="trajectory_transformer" pkg="active_3d_planning_app_reconstruction" type="trajectory_transformer.py" if="$(arg use_sim)" >
      <remap from="input_trajectory" to="/$(arg mav_name)/command/trajectory_drifty" />
      <remap from="output_trajectory" to="/$(arg mav_name)/command/trajectory" />
      <param name="drifty_odom_frame" value="rovioli/imu" />
      <param name="simulation_odom_frame" value="$(arg mav_name)/base_link" />
    </node> 
   
 </group>

 <node name="floorplan_node" pkg="localization_using_floorplans" type="ros_localization_node" output="screen">

    <remap from="odometry" to="/rovioli/odom_T_M_I" />
    <remap from="pointcloud" to="/isaac/isaac_sensor_model/isaac_sensor_out"/>
    <remap from="transform_G_I" to="/rovioli/Transform_G_I" />

    <param name="floorplan_path" value="/home/michbaum/Projects/optag_EH/data/floorplan/MazeOccupancyMap.png"/> <!-- WarehouseOccupancyMap.png -->
    <param name="floorplan_height" value="40"/>
    <param name="floorplan_width" value="40"/>

    <!-- These parameters are given -->
    <param name="ray_length" value="$(arg ray_length)"/>
    <param name="sampling_time" value="0.0"/>
    <param name="focal_length" value="320.0"/>
    <param name="resolution_x" value="640"/>
    <param name="resolution_y" value="480"/>
    <param name="downsampling_factor" value="1.0"/>

    <!-- These parameters are to be tuned -->
    <param name="voxel_size" value="0.1"/> <!-- 0.1m x 0.1m  per pixel -->
    <param name="ray_step" value="0.1"/>
    <param name="epsilon" value="0.05"/> <!-- Epsilon to count grid cell as visited -->

    <param name="l_max" value="2"/>

    <param name="transformation_thresh" value="2"/> <!-- Threshold for transformation to either use estimated position on floor plan or SLAM estimate-->

    <param name="d_l" value="0.3"/> <!-- Threshold between two position before updating floor plan localization-->
    <param name="theta_l" value="0.26"/> <!-- Threshold between two rotations before updating floor plan localization-->

    <param name="num_samples" value="300"/> <!-- 350 -->
    <param name="skip_distance" value="2"/> <!--Skip distance  from occupied voxels for traversibility-->
    <param name="lkh_executable" value="/home/michbaum/Projects/LKH/LKH-2.0.9/LKH"/>

    <param name="occupancy_threshold" value="3"/>  <!--Within this threshold from contour mark as occupied-->
    <param name="sample_method" value="random"/>  <!--Random or uniform sampling-->
    <param name="contours_traversable" value="false"/> <!--If the contours are traversable (e.g. Warehouse env)-->
    <param name="contour_cost_factor" value="300"/> <!--Cost factor for contour traversability-->

    <param name="radius" value="1.5"/> <!-- Radius for the node on floorplan to be considered as visited -->
    <param name="max_radius" value="10"/> <!-- Max Radius for the next node on floorplan before rewirring -->

    <param name="log_file" value="$(arg output_folder)/transformation.txt"/>

    <rosparam command="load" file="$(find active_3d_planning_app_reconstruction)/cfg/voxblox/transforms.yaml"/> 

    <!-- <param name="edge_log_file" value="$(arg output_folder)/edges.txt"/>
    <param name="node_log_file" value="$(arg output_folder)/nodes.txt"/>
    <param name="path_log_file" value="$(arg output_folder)/path.txt"/> -->

    <param name="opt_path_log_file" value="$(arg output_folder)/opt_path.txt"/>
    <param name="occupancy_log_file" value="$(arg output_folder)/occupancy.csv"/>
    <param name="occupancy_opt_log_file" value="$(arg output_folder)/occupancy_opt.csv"/>

    <param name="use_floorplan_loc" value="$(arg use_floorplan)"/>

    <!-- Environemnt specific params -->
    <param name="x_min" value="-20"/>
    <param name="y_max" value="20"/>
    <param name="x_max" value="20"/>
    <param name="y_min" value="-20"/>

  </node>

  <!-- RVIZ Visualization -->
  <node type="rviz" name="rviz_experiment" pkg="rviz" args="-d $(find active_3d_planning_app_reconstruction)/cfg/experiments/altered_experiment_visualization.rviz" if="$(arg visualize)"/>
</launch>
