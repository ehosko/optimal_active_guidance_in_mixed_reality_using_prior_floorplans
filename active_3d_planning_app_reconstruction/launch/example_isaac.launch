<launch>
  <!-- Gazebo arguments -->
  <arg name="mav_name" default="firefly"/>
  <arg name="gui" default="false"/>
  <arg name="verbose_gazebo" default="false"/>

  <!-- Voxblox arguments -->
  <arg name="voxel_size" default="0.10"/>
  <arg name="voxels_per_side" default="16"/>
  <arg name="ray_length" default="5.0"/>
  <arg name="method" default="merged"/>
  <arg name="verbose_voxblox" default="false"/>
    
  <!-- Unreal Routine arguments -->
<!--   <arg name="uecv_mode" default="standard"/>
  <arg name="slowdown" default="0.0"/>
  <arg name="delay" default="3.0"/>  -->

   <!-- Isaac Routine arguments -->
  <arg name="delay" default="3.0"/>  
  
  <!-- Unreal Sensor arguments (ground_truth, kinect, gaussian_depth_noise) -->
  <arg name="model_type" default="gaussian_depth_noise"/>
  <arg name="flatten_distance" default="6.0"/>
  <arg name="maximum_distance" default="0.0"/>
  
  <!-- Odometry arguments (random_walk, ground_truth) -->
  <!-- TODO: maybe use ground_truth in the beginning? -->
  <arg name="odom_noise_model" default="random_walk"/>
  
  <!--  Planner arguments-->
  <arg name="planner_config" default="planners/example_config.yaml"/>
  
  <!--  Experiment arguments -->  
  <!-- <arg name="experiment_config" default="Warehouse.yaml"/>  -->  
  <arg name="experiment_config" default="Maze.yaml"/>
  

  <!-- *** Run the Simulation *** -->
  <!-- Load experiment config -->
  <rosparam command="load" file="$(find active_3d_planning_app_reconstruction)/cfg/experiments/$(arg experiment_config)"/>

  <!-- Setup empty gazebo world for physics-->
  <env name="GAZEBO_MODEL_PATH" value="${GAZEBO_MODEL_PATH}:$(find rotors_gazebo)/models"/>
  <env name="GAZEBO_RESOURCE_PATH" value="${GAZEBO_RESOURCE_PATH}:$(find rotors_gazebo)/models"/>
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find isaac_cv_ros)/content/gazebo_empty.world" />
    <arg name="debug" value="false" />
    <arg name="paused" value="true" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="verbose" value="$(arg verbose_gazebo)"/>
  </include>

  <group ns="$(arg mav_name)">
    <!-- Setup a mav -->
    <include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
      <arg name="mav_name" value="$(arg mav_name)" />
      <arg name="model" value="$(find rotors_description)/urdf/mav_generic_odometry_sensor.gazebo" />
      <arg name="enable_ground_truth" value="true" />
      <arg name="enable_logging" value="false" />
      <arg name="z" value="0" />
    </include>
    
    <!-- MPC trajectory tracker (0.0021 sampling time needs to match odom publish rate!)-->
    <node name="mav_nonlinear_mpc" pkg="mav_nonlinear_mpc" type="nonlinear_mpc_node" respawn="true" clear_params="true">
      <remap from="odometry" to="ground_truth/odometry" />
      <rosparam file="$(find mav_nonlinear_mpc)/resources/nonlinear_mpc_$(arg mav_name).yaml" />
      <rosparam file="$(find mav_disturbance_observer)/resources/disturbance_observer_$(arg mav_name).yaml"/>
      <param name="use_rc_teleop" value="false"/>
      <param name="verbose" value="false" />
      <param name="reference_frame" value="world"/>
      <param name="sampling_time" value="0.0021"/>
    </node>
    
    <!-- Rotor input controller -->
    <node name="PID_attitude_controller" pkg="mav_lowlevel_attitude_controller" type="mav_pid_attitude_controller_node" respawn="true" clear_params="true">
      <remap from="odometry" to="ground_truth/odometry" />
      <rosparam file="$(find mav_lowlevel_attitude_controller)/resources/PID_attitude_$(arg mav_name).yaml" />
    </node>
    
    <!-- Odometry: noise model -->
    <node name="odometry_noise_model" pkg="active_3d_planning_app_reconstruction" type="gps_odometry_simulator.py" output="screen">
      <param name="position_uncertainty" value="0.05"/>
      <param name="roll_pitch_uncertainty" value="1.5" />
      <param name="yaw_uncertainty" value="5.0" />
      <param name="noise_model" value="$(arg odom_noise_model)" />
      <param name="publish_tf" value="true" />
      <remap from="odometry_in" to="ground_truth/odometry" />
    </node> 

    <!-- static camera transform -->
    <node pkg="tf" type="static_transform_publisher" name="tf_camera_to_link" args="0 0 0 -0.5 0.5 -0.5 0.5 /camera_link /camera 100"/>  
  </group>

  <group ns="isaac">
    <!-- Isaac vision client -->
    <node name="isaac_ros_client" pkg="isaac_cv_ros" type="isaac_ros_client.py" required="true" output="screen">
      <!-- <param name="publish_tf" value="false"/> -->
      <!-- <param name="collision_on" value="true"/> --> <!-- Currently not implemented. -->
      <remap from="odometry" to="/$(arg mav_name)/ground_truth/odometry" /> <!-- TODO: Change back to non-throttled! -->
      <param name="publish_color_images" value="false" />
      <param name="publish_gray_images" value="true" />
      <remap from="camera_info" to="isaac_sim/camera_info" />
      <remap from="rgb" to="isaac_sim/rgb" />
      <remap from="depth" to="isaac_sim/depth" />
      <remap from="teleport" to="isaac_sim/teleport" />
    </node>

    <!-- Launch the topic_tools throttle node -->
    <node name="topic_throttler" type="throttle" pkg="topic_tools" args="messages isaac_ros_client/isaac_sensor_raw 8.5 isaac_ros_client/isaac_sensor_raw_throttled" />
    
    <!-- Isaac sensor model -->
    <node name="isaac_sensor_model" pkg="isaac_cv_ros" type="sensor_model.py" output="screen">
      <param name="camera_params_ns" value="/isaac/isaac_ros_client/camera_params"/>
      <param name="flatten_distance" value="$(arg flatten_distance)"/>
      <param name="model_type" value="$(arg model_type)" />
      <param name="maximum_distance" value="$(arg maximum_distance)" />
      <!-- We need the gray images for map construction in maplab -->
      <!-- <param name="publish_gray_images" value="$(arg use_rovio)" />  -->
      <!-- TODO: These are pretty much only for debugging, they get released alongside the pointcloud message. -->
      <param name="publish_color_images" value="false" />
      <param name="publish_gray_images" value="false" />
      <param name="publish_transform_stamped" value="true"/>
      <param name="k_mu_2" value="0.0024" />
      <param name="k_sigma_2" value="0.0024" />
      <remap from="isaac_sensor_raw" to="isaac_ros_client/isaac_sensor_raw_throttled" />
    </node>

    <!-- Simulation manager for launching the MAV and monitoring -->
    <node name="simulation_manager" pkg="isaac_cv_ros" type="simulation_manager.py" output="screen">
      <param name="ns_mav" value="/$(arg mav_name)" />
      <param name="ns_gazebo" value="/gazebo" />
      <param name="monitor" value="true" />
      <param name="horizon" value="20" />
      <remap from="isaac_raw_in" to="isaac_ros_client/isaac_sensor_raw" />
      <remap from="isaac_out_in" to="isaac_sensor_model/isaac_sensor_out" />
    </node>
    
    <!-- Experiment launcher, data generation-->
    <node name="eval_data_node" pkg="active_3d_planning_app_reconstruction" type="eval_data_node.py" output="screen" required="true">
      <remap from="isaac_out_in" to="isaac_sensor_model/isaac_sensor_out" />
      <remap from="isaac_simulation_ready" to="simulation_manager/simulation_ready" />
      <remap from="collision" to="isaac_ros_client/collision" />
      <param name="ns_planner" value="/planner/planner_node" />
      <param name="ns_voxblox" value="/planner/voxblox_node" />
      <param name="delay" value="$(arg delay)" />
      <param name="startup_timeout" value="30.0" />
      <param name="evaluate" value="false" />
    </node>

    <!-- static camera transform for the simulation (Isaac has a different convention than ROS!) -->
    <!-- static_transform_publisher x y z qx qy qz qw frame_id child_frame_id  period_in_ms -->
    <!-- Maze -->
    <node pkg="tf" type="static_transform_publisher" name="tf_sim_world_to_world" args="0.0 0.0 -1.5 0.0 0.0 0.0 1.0 /world /sim_world 100" if="$(eval experiment_config == 'Maze.yaml')"/>
    
    <!-- Warehouse -->
    <node pkg="tf" type="static_transform_publisher" name="tf_sim_world_to_world" args="-5.0 -5.0 -2.0 0.0 0.0 0.0 1.0 /world /sim_world 100" if="$(eval experiment_config == 'Warehouse.yaml')"/>
    
    <!-- Both -->
    <node pkg="tf" type="static_transform_publisher" name="tf_camera_sim_frame_to_firefly" args="0 0 0 -0.5, 0.5, 0.5, -0.5 /$(arg mav_name)/base_link /camera_sim_frame 100"/>
    <!-- This one is wrong -->
    <!-- <node pkg="tf" type="static_transform_publisher" name="tf_camera_sim_to_sim_frame" args="0 0 0 0.0, 0.707, 0.0, 0.707 /camera_sim_frame /camera_sim 100"/> -->
  </group>
  
  <group ns="planner">
    <!-- Voxblox -->
    <node name="voxblox_node" pkg="voxblox_ros" type="esdf_server" output="screen" args="-alsologtostderr">
      <remap from="pointcloud" to="/isaac/isaac_sensor_model/isaac_sensor_out"/>
      <param name="use_tf_transforms" value="true"/>
      <param name="publish_tsdf_map" value="true" />
      <param name="publish_esdf_map" value="true" />
      <param name="tsdf_voxel_size" value="$(arg voxel_size)" />
      <param name="tsdf_voxels_per_side" value="$(arg voxels_per_side)" />
      <param name="color_mode" value="color" />
      <param name="update_mesh_every_n_sec" value="1.0" />
      <param name="method" value="$(arg method)" />
      <param name="max_ray_length" value="$(arg ray_length)" />
      <param name="allow_clear" value="true" />
      <param name="verbose" value="$(arg verbose_voxblox)" />
    </node>
    
    <!-- Planner -->
    <node name="planner_node" pkg="active_3d_planning_app_reconstruction" type="reconstruction_planner_node" output="screen">
		  <!-- Voxblox Server -->
      <remap from="planner_node/esdf_map_in" to="voxblox_node/esdf_map_out" />
      <remap from="planner_node/tsdf_map_in" to="voxblox_node/tsdf_map_out" />
      <param name="use_tf_transforms" value="false" />
      <param name="tsdf_voxel_size" value="$(arg voxel_size)" />
      <param name="tsdf_voxels_per_side" value="$(arg voxels_per_side)" />
      <param name="update_mesh_every_n_sec" value="0.0" />
      <param name="publish_traversable" value="false" />    
      <!-- TODO: maybe change to true? -->
      <!-- <param name="publish_pointclouds" value="false" /> -->
      <param name="publish_pointclouds" value="true" />
    	<!-- General Settings -->
      <remap from="odometry" to="/$(arg mav_name)/ground_truth/odometry" />
      <remap from="command/trajectory" to="/$(arg mav_name)/command/trajectory" />

      <!-- Build the Planner by Configuration     -->
      <rosparam command="load" file="$(find active_3d_planning_app_reconstruction)/cfg/$(arg planner_config)"/>
    </node>    
  </group>

  <!-- RVIZ Visualization -->
  <node type="rviz" name="rviz_voxblox" pkg="rviz" args="-d $(find active_3d_planning_app_reconstruction)/cfg/experiments/altered_experiment_visualization.rviz"/>
</launch>
